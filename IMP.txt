* Subarray:
 * 1: Contiguous
 * 2: Order of appearence is maintained
 * 3: Every subarray is a subset.
 * 4: Every subarray is a subsequence
 * 5:For an array/string of size n, we can have ( (n*(n+1))/2 + 1 ) Subarray in
 * total i.e (n*(n+1))/2 non-empty subarray + 1 Empty subarray.
 * 
* Subsequence:
 * 1: May or may not be contiguous
 * 2: Order of appearence is maintained.
 * 3: Derived by deleting some or none of the elements of the sequence without
 * changing the order of
 * the remaining elements.
 * 4: Every subsequence is subset.
 * 5: For a sequence/array/string of size n, we can have 2^n Subsequence in
 * total i.e ((2^n)-1) non-empty sub-sequences + 1 Empty Subsequence.
 * 
* Subset:
 * 1 : May or maynot be contiguous
 * 2: Order of appearence may or may not be maintained.
 * 3: Subsets and subsequence ae exactly same thing the only difference between
 * them is that subsequence should maintain order of appearence of elements
 * while subsets don't need to preserve order of appearence of elements
 * for ex : {1,2} and {2,1} represent the same subset however while
 * writing/listing the subsets of the sets you can either write {1,2} or {2,1}
 * it doesnot matter but you can not list both at the same time
 * since they are exactly the same thing.
 * 
* Ex: arr[]={1, 2, 3}
 * 
* Subarrays :
 * 
 * [1]
 * [1,2]
 * [1, 2, 3]
 * [2]
 * [2,3]
 * [3]
 * 
 * 
* Subsequences:
 * 
 * []
 * [1]
 * [1, 2]
 * [1, 3]
 * [1, 2, 3]
 * [2]
 * [2, 3]
 * [3]
 * 
 * Subsets:
 * 
 * []
 * [1]
 * [1, 2] or [2, 1]
 * [1, 3] or [3, 1]
 * [1, 2, 3] or [1, 3, 2] or [2, 3, 1] or [2, 1, 3] or [3, 1, 2] or [3, 2, 1]
 * [2]
 * [2, 3] or [3, 2]
 * [3]
 */